{"name":"Flabbergast Configuration Language","tagline":"Making configuration files less o_0","body":"### Configuration of Applications, Servers, and Containers\r\nComplicated applications, deployed on multiple servers, have complicated configurations. How do you describe the configuration of a single part of that system, and all the layers underneath, and get it right? Once you have that right, now make a testing environment, or migrate to a new cloud provider. To get a background in why configurations are getting complicated, watch [Configuration Pinocchio](https://www.usenix.org/conference/srecon15europe/program/presentation/masella), presented at SREcon15 Europe.\r\n\r\nFlabbergast makes this easier: it helps to describe configuration and it can handle the whole stack: from application to metal. Flabbergast provides a flexible template system to compose and recompose configurations and generate an output description, in an format you need. It happily nests systems together: the templates for an application and a container manager can be married with a minimum of fuss and “plumbing”, copying data from one place to another.\r\n\r\n### What it is and isn't\r\nFlabbergast is two things: a programming language geared to generating configurations and a library of templates to help generate correct configurations before they are deployed. Unlike Chef or Puppet, Flabbergast doesn't deploy configurations; it's a system for describing configuration. A way to explain the state of the world to push out, through whatever means suit your application.\r\n\r\nAs a language, Flabbergast is a little unusual. In most languages, it's your job as the programmer to move data around through parameters, arguments, fields, and closures. For configuration files, you don't want to have to shuttle information around, so Flabbergast does it for you. It uses contextual lookup to find information so you can define things where it makes sense and not worry about copying it to where it gets used.\r\n\r\n### Getting Started\r\nFor a quick introduction, have a look at the [primer slide deck](https://docs.google.com/presentation/d/10YLdBBC0a2nIxbttvg0jg95rHXa3-UxwyA-ZwiDdq7E/edit?usp=sharing). To really get started, take a look at [the manual](https://github.com/apmasell/flabbergast/blob/master/flabbergast-manual.md). There are some [serious examples](https://github.com/apmasell/flabbergast/tree/master/examples) and some fun [Rosetta Code examples](https://github.com/apmasell/flabbergast/tree/master/rosettacode).\r\n\r\nIf you are on Ubuntu or Debian, it's a snap using a PPA. The most recent version is also posted to Maven Central. Follow the [installation instructions](https://github.com/apmasell/flabbergast/blob/master/README.md#installation).\r\n\r\n### Comparison\r\n\r\n|*Language*|Flabbergast|[Coil](https://code.google.com/p/coil/\u0001)|[HOCON](https://github.com/typesafehub/config)|[Jsonnet](http://google.github.io/jsonnet/doc/)|[NixOS](http://nixos.org/)|[Pan](http://www.quattor.org/)|[Pystachio](https://github.com/wickman/pystachio)|\r\n|---|---|---|---|---|---|---|---|\r\n|*Paradigm*|Functional|Functional|Imperative°|Functional|Functional|Imperative|Imperative|\r\n|*Side-effect Free*|Yes|Yes|No|Yes|Yes|No|Hybrid°|\r\n|*Inheritance*|Prototype|Prototype|Prototype|Prototype|None|Class-based|Class-based|\r\n|*Typing Strength*|Strong|Weak|Weak|Strong|Strong|Strong|Strong|\r\n|*Typing Enforcement*|Dynamic|Dynamic|Dynamic|Dynamic|Dynamic|Hybrid°|Dynamic|\r\n|*Schema Validation*|None|None|None|None|None|Assignment|Request|\r\n|*Turing Complete*|Yes|No|No|Yes|Yes|Yes|No|\r\n|*Scoping*|Dynamic|Lexical|Lexical|Lexical|Lexical|Lexical|Hybrid°|\r\n|*Default Propagation*|Scope, inheritance|Inheritance|Inheritance|Inheritance|Operator|Inheritance|Inheritance|\r\n|*Output Format*|Python objects|Text, Custom|Java, Python, or Ruby objects|JSON|Java objects|JSON, XML|Python objects|\r\n\r\n° Depends on context. See SREcon15 Europe [Configuration Pinocchio](http://www.masella.name/~andre/2015-srecon-andre_masella.pdf) paper for details.\r\n\r\n### Support and Community\r\nWe are on the Internet, and plan to stay there. You can try FreeNode IRC in `#flabbergast`, [Google Groups](https://groups.google.com/forum/#!forum/flabbergast-users), [Twitter](http://twitter.com/co_0nfig), [Google+](https://plus.google.com/communities/103010827049942376743), or [GitHub](https://apmasell/flabbergast).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}